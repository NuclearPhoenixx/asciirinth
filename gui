#!/usr/bin/env bash
# All the core-functionality that does not deal with the core-gameplay.
# All functions for the GUI to be executed by the game accordingly.

####################################
#              TO-DO               #
# 1) Credits                       #
# 2) Option to en-/disable mods    #
# 3) To-Do comments in code        #
####################################


####################################
#        WHAT HAS BEEN DONE        #
# 1) Performance improvements.     #
# 2) Fixes and optimizations.      #
# 3) Rewrote gui to make it more   #
#    modular.                      #
# 4) Map selection is now much     #
#    nicer.                        #
# 5) You can customize the goal    #
#    and player characters.        #
# 6) The map-maker now verifies    #
#    if a map has indeed been      #
#    created.                      #
# 7) Added installer               #
# 8) Added mod support             #
####################################


# VERSION CODE
version=1.1.0
# Color settings
COLOR_hint="\033[1;33m"
COLOR_labyrinth="\033[0;32m"
COLOR_menuHeader="\033[0;32m"
COLOR_selection="\033[1;32m"
COLOR_reset="\033[0m"
# COLOR CODE CHEAT SHEET
# red="\033[0;31m"
# green="\033[0;32m"
# brown="\033[0;33m"
# blue="\033[0;34m"
# purple="\033[0;35m"
# cyan="\033[0;36m"
# lightgray="\033[0;37m"
# darkgray="\033[1;30m"
# lightred="\033[1;31m"
# lightgreen="\033[1;32m"
# yellow="\033[1;33m"
# lightblue="\033[1;34m"
# lightpurple="\033[1;35m"
# lightcyan="\033[1;36m"
# white="\033[1;37m"

# Text that shows up when won
TEXT_won="\033[1;35m ! YOU WIN !${COLOR_reset}"

# CHECK REQUIREMENTS
if ! [ "${BASH_VERSION:0:1}" -ge 4 ]
then
  echo -e "\033[0;31m!! You need at least BASH version 4.0 to play this game! \033[0m"
  exit 1
fi
# CHECK IF SED EXISTS (USED FOR SETTINGS MANAGEMENT)
sed --help >/dev/null 2>&1 || {
  echo -e "\033[1;31m!! Error looking for command 'sed'. Unable to start! \033[0m";
  exit 1;}
# CHECK IF FIND UTILS EXISTS (USED FOR INDEXING MAPS)
find --help >/dev/null 2>&1 || {
  echo -e "\033[1;31m!! Error looking for command 'find'. Unable to start! \033[0m";
  exit 1;}
# CHECK IF GREP EXISTS (USED IN MAP SELECTION)
grep --help >/dev/null 2>&1 || {
  echo -e "\033[1;31m!! Error looking for command 'grep'. Unable to start! \033[0m";
  exit 1;}
# CHECK IF SETTINGS FILE EXISTS
find settings.config >/dev/null 2>&1 || {
  # if non-existant, write a new settings file with standard values
  echo "ARROWS">settings.config;
  echo "p">>settings.config;
  echo "default.map">>settings.config;
  echo "O">>settings.config;
  echo "*">>settings.config;}
## END OF TESTS

#######################################################
# FUNCTION DEFINITIONS                                #
# ALL FUNCTION BEYOND THIS POINT                      #
#######################################################

### LOAD ALL THE OPTIONS ###
function query_options {
  # Query some stuff from the settings file
  OPTIONS_controls=$(sed -n 1p settings.config)
  # Pause key
  KEY_escape=$(sed -n 2p settings.config)
  # The default map file
  mapfile="maps/"$(sed -n 3p settings.config)
  # The ASCII letter that's used to show the players location
  CHAR_player=$(sed -n 4p settings.config)
  # Character that poses as the goal that must be reached to win
  CHAR_goal=$(sed -n 5p settings.config)
  # Check if mods are enabled
  OPTIONS_mods=$(sed -n 6p settings.config)

  # The standard keys to move with
  if [ "$OPTIONS_controls" = "WASD" ]
  then
    KEY_right="d"
    KEY_left="a"
    KEY_down="s"
    KEY_up="w"
  else
    KEY_right="C"
    KEY_left="D"
    KEY_down="B"
    KEY_up="A"
  fi
}

# Some other important code
# Query options first start
query_options
# hide cursor
tput civis -- invisible

### EXIT WHEN CATCHING INTERRUPT SIGNAL OR MANUAL EXIT ###
function exit_program {
  clear
  tput cnorm -- normal
  exit 0
}

### INGAME MENU ###
function ingamePause {
  menu=(" [PAUSE]" " [*] Resume" " [~] Exit")
  call=ingamePause_do
}
function ingamePause_do {
  case $SELECT_menu in
      1) exitVar="resume";;
      2) exitVar="exit";;
  esac
}

### OPTIONS MENU ###
function options {
  menu=(" [Options]" " [+] Controls: $OPTIONS_controls" " [+] PAUSE Key:  $KEY_escape"
        " [+] Player Character:  $CHAR_player" " [+] Goal Character:  $CHAR_goal" " [+] Enabled Mods: $OPTIONS_mods"
        " [~] Return to menu")
  call=options_do
}
function options_do {
  local tmpvar= #reset tmpvar for changing input
  trap "tput civis -- invisible; return" SIGINT
  case $SELECT_menu in
      1)
        if [ "$OPTIONS_controls" = "ARROWS" ]
        then
          sed -i '1s/.*/WASD/' settings.config
        else
          sed -i '1s/.*/ARROWS/' settings.config
        fi;;
      2)
        echo -e "\n"
        tput cnorm -- normal
        read -p $'\e[1;33m [?] Enter your PAUSE key: \e[0m' tmpvar
        tput civis -- invisible
        # CHECK IF VAR IS SET AND ONLY CONTAINS OF LETTERS
        if [ $tmpvar ] && [[ "$tmpvar" =~ [a-zA-Z] ]]
        then
          # CHECK IF ONE OF THE CONTROL KEYS
          if ! echo "$tmpvar" | grep -E 'w|a|s|d|A|B|C|D'>/dev/null 2>&1
          then
              sed -i "2s/.*/$tmpvar/" settings.config
          else
            echo -e "\033[1;31m [!] Your pause key cannot be one of the control keys! \033[0m"
            read -s -n1 -r
          fi
        fi;;
      3)
        echo -e "\n"
        tput cnorm -- normal
        read -p $'\e[1;33m [?] Enter your custom player character: \e[0m' tmpvar
        tput civis -- invisible
        ## TO-DO: CHECK IF PLAYER CHAR IS REALLY UNIQUE
        if [ "$tmpvar" ]
        then
          sed -i "4s/.*/$tmpvar/" settings.config
          find 'maps' -name '*.map' -exec sed -i "s/$CHAR_player/$tmpvar/g" {} \;
        fi;;
      4)
        echo -e "\n"
        tput cnorm -- normal
        read -p $'\e[1;33m [?] Enter your custom goal character: \e[0m' tmpvar
        tput civis -- invisible
        ## TO-DO: CHECK IF GOAL CHAR IS REALLY UNIQUE
        if [ "$tmpvar" ]
        then
          sed -i "5s/.*/$tmpvar/" settings.config
          find 'maps' -name '*.map' -exec sed -i "s/$CHAR_goal/$tmpvar/g" {} \;
        fi;;
      5)
        if [ "$OPTIONS_mods" = "no" ]
        then
          sed -i '6s/.*/yes/' settings.config
        else
          sed -i '6s/.*/no/' settings.config
        fi;;
      6) mainMenu; return;;
  esac

  query_options
  options
}

### MAP SELECTION ###
function selectMap {
  menu=(" [Map Selection]\n\n Please select one of these maps:")
  mapArray=("") # GET A CLEAN ARRAY WITH MAPS FOR SELECTION PROCESS
  for map in $(find maps/*.map -printf '\n%f')
  do
    menu+=("  $map")
    mapArray+=("$map")
  done
  menu+=(" [~] Cancel")
  call=selectMap_do
}
function selectMap_do {
  if [ $SELECT_menu = ${#mapArray[@]} ] # The last entry (cancel)
  then
    mainMenu
  else
    local mapSelection="${mapArray[$SELECT_menu]}"

    if grep -q "$CHAR_player" "maps/$mapSelection" && grep -q "$CHAR_goal" "maps/$mapSelection"
    then
      : # Just continue to the part after the if.
    elif grep -q "*" "maps/$mapSelection" && grep -q "O" "maps/$mapSelection"
    then
      sed -i -e "s/*/$CHAR_goal/g" "maps/$mapSelection"
      sed -i -e "s/O/$CHAR_player/g" "maps/$mapSelection"
    else
      echo -e "\033[1;31m\n [!] The map file seems broken! Please choose another one.${COLOR_reset}"
      read -n1 -r -s
      return
    fi

    sed -i "3s/.*/$mapSelection/" settings.config
    echo -e "\033[1;32m\n [âœ“] Your default map has been successfully changed to $mapSelection!${COLOR_reset}"
    read -n1 -r -s
    query_options
  fi

}

### MAIN MENU ###
function mainMenu {
  menu=(" ASCIIrinth $version" " [*] Play" " [*] Select Map" " [*] Create Map" " [*] Options" " [~] Exit")
  call=mainMenu_do
}
function mainMenu_do {
  case $SELECT_menu in
      1) exitVar="play";;
      2) selectMap;;
      3) mapMaker;;
      4) options;;
      5) exit_program;;
  esac
}

#######################################################
# THIS IS FIXED MENU CODE TO MANAGE EVERYTHING.       #
# NEW MENUS AND THEIR CODES ARE DECLARE ABVOVE THIS.  #
#######################################################
function build {

  clear
  local i=1
  local select=$((SELECT_menu + 1))
  for item in "${menu[@]}"
  do

    if [ "$select" = $i ]
    then
      local color="$COLOR_selection"
    else
      local color="$COLOR_reset"
    fi

    if [ $i = 1 ]
    then
      echo -e "\n${COLOR_menuHeader}$item${COLOR_reset}\n"
    elif [ $i == $length ]
    then
      echo -e "\n${color}$item${COLOR_reset}"
    else
      echo -e "${color}$item${COLOR_reset}"
    fi
    ((i++))

  done
}

### GUI MANAGER FUNCTION ###
function gui {

  while true
  do

    # Update length
    length=${#menu[@]}
    # "Repair" length var
    max=$((length - 1))

    # CHECK IF MENU HAS CHANGED
    if ! [ "$call_past" = "$call" ]
    then
      # Auto-select first entry
      SELECT_menu=1
      # store the old max again for further comparison
      call_past="$call"
    fi

    build
    trap "if [ "$call" = "mainMenu_do" ]; then exit_program; fi" SIGINT
    read -s -n1 keyInput
    case $keyInput in
        A)
            if ! [ "$SELECT_menu" = "1" ]
            then
              SELECT_menu=$((SELECT_menu - 1))
            fi;;
        B)
            if ! [ "$SELECT_menu" = "$max" ]
            then
              SELECT_menu=$((SELECT_menu + 1))
            fi;;
        $KEY_escape) #RETURN TO GAME BY PRESSING THE PAUSE KEY AGAIN
            if [ "$call" = "ingamePause_do" ] # ONLY DO IF INGAME OFC
            then
              return
            fi;;
        "") # CALL THE CORRESPONDING MENU CODE
            $call

            if [ $exitVar ]
            then
              return
            fi;;
    esac
  done
}

# RESET GUI TO MAIN MENU
function reset_gui {
  # Reset exitVar!
  exitVar=
  # Reset to open main menu
  mainMenu
}
