#!/usr/bin/env bash

#################
#     TO-DO     #
# 1) Credits    #
#################

# VERSION CODE
version=1.0.2
# Color settings
COLOR_hint="\033[1;33m"
COLOR_labyrinth="\033[0;32m"
COLOR_menuHeader="\033[0;32m"
COLOR_selection="\033[1;32m"
COLOR_reset="\033[0m"
# COLOR CODE CHEAT SHEET
# red="\033[0;31m"
# green="\033[0;32m"
# brown="\033[0;33m"
# blue="\033[0;34m"
# purple="\033[0;35m"
# cyan="\033[0;36m"
# lightgray="\033[0;37m"
# darkgray="\033[1;30m"
# lightred="\033[1;31m"
# lightgreen="\033[1;32m"
# yellow="\033[1;33m"
# lightblue="\033[1;34m"
# lightpurple="\033[1;35m"
# lightcyan="\033[1;36m"
# white="\033[1;37m"

# Stuff to do pre-start like checking requirements
if ! [ "${BASH_VERSION:0:1}" -ge 4 ]
then
  echo -e "\033[0;31mYou need BASH version 4+ to play this game!\033[0m"
  exit 1
fi
# CHECK IF SED EXISTS (USED FOR SETTINGS MANAGEMENT)
sed --help >/dev/null 2>&1
if ! [ $? = 0 ]
then
  echo -e "\033[0;31mCould not find command 'sed'. Unable to start!\033[0m"
  exit 1
fi
# CHECK IF FIND UTILS EXISTS (USED FOR MAP SELECTION)
find --help >/dev/null 2>&1
if ! [ $? = 0 ]
then
  echo -e "\033[0;31mCould not find command 'find'. Unable to start!\033[0m"
  exit 1
fi
# CHECK IF GREP EXISTS (USED IN MAP SELECTION)
grep --help >/dev/null 2>&1
if ! [ $? = 0 ]
then
  echo -e "\033[0;31mCould not find command 'grep'. Unable to start!\033[0m"
  exit 1
fi
# CHECK IF SETTINGS FILE EXISTS
find settings.config >/dev/null 2>&1
if ! [ $? = 0 ]
then
  echo -e "\033[0;31mThe config file seems to be missing! Please re-download the game.\033[0m"
  exit 1
fi
## END OF TEST


#######################################################
# FUNCTION DEFINITIONS                                #
# ALL FUNCTION BEYOND THIS POINT                      #
#######################################################

### LOAD ALL THE OPTIONS ###
function query_options {
  # Query some stuff from the settings file
  OPTIONS_controls=$(sed -n 1p settings.config)
  OPTIONS_pauseKey=$(sed -n 2p settings.config)
  OPTIONS_map=$(sed -n 3p settings.config)
  OPTIONS_playerChar=$(sed -n 4p settings.config)
  OPTIONS_winChar=$(sed -n 5p settings.config)
  # The standard keys to move with
  if [ $OPTIONS_controls = "WASD" ]
  then
    KEY_right="d"
    KEY_left="a"
    KEY_down="s"
    KEY_up="w"
  else
    KEY_right="C"
    KEY_left="D"
    KEY_down="B"
    KEY_up="A"
  fi
  # PAUSE KEY
  KEY_escape=$OPTIONS_pauseKey
  # The default map file
  mapfile="maps/$OPTIONS_map"
  # The ASCII letter that's used to show the players location
  # This must correspond with an unique character on the map
  PLAYER_char="$OPTIONS_playerChar"
  # Character that implies the goal
  WIN_char="$OPTIONS_winChar"
}

### EXIT WHEN CATCHING INTERRUPT SIGNAL OR MANUAL EXIT ###
function exit_program {
  clear
  tput cnorm -- normal
  exit 0
}


### INGAME MENU ###
function ingamePause {
  menu=(" [PAUSE]" " [*] Resume" " [~] Exit")
  call=ingamePause_do
}
function ingamePause_do {
  case $SELECT_menu in
      1) exitVar="resume";;
      2) exitVar="exit"
  esac
}

### OPTIONS MENU ###
function options {
  menu=(" [Options]" " [+] Controls: $OPTIONS_controls" " [+] PAUSE Key: '$OPTIONS_pauseKey'" " [~] Return to menu")
  call=options_do
}
function options_do {
  case $SELECT_menu in
      1)
        if [ "$OPTIONS_controls" = "ARROWS" ]
        then
          sed -i '1s/.*/WASD/' settings.config
        else
          sed -i '1s/.*/ARROWS/' settings.config
        fi
        query_options
        options;;
      2)
        echo -e "\n"
        tput cnorm -- normal
        read -p $'\e[1;33m  # Enter your PAUSE key: \e[0m' pauseKey2Be
        #echo -e "\033[0m"
        tput civis -- invisible
        ## TO-DO: CHECK IF PAUSE KEY IS AN ARROW KEY OR WASD
        if ! [ "$pauseKey2Be" = "" ]
        then
          sed -i "2s/.*/$pauseKey2Be/" settings.config
        fi
        query_options
        options;;
      3) mainMenu
  esac
}

### MAIN MENU ###
function mainMenu {
  menu=(" ASCIIrinth $version" " [*] Play" " [*] Select Map" " [*] Create Map" " [*] Options" " [~] Exit")
  call=mainMenu_do
}
function mainMenu_do {
  case $SELECT_menu in
      1) exitVar="exit";;
      2) select_map;; # <---- TOOD
      3) source $(dirname $0)/map-maker;;
      4) options;;
      5) exit_program
  esac
}

#######################################################
# THIS IS FIXED MENU CODE TO MANAGE EVERYTHING.       #
# NEW MENUS AND THEIR CODES ARE DECLARE ABVOVE THIS.  #
#######################################################
function build {

  clear
  local i=1
  local select=$((SELECT_menu + 1))
  for item in "${menu[@]}"
  do

    if [ "$select" = $i ]
    then
      local color="$COLOR_selection"
    else
      local color="$COLOR_reset"
    fi

    if [ $i = 1 ]
    then
      echo -e "\n${COLOR_menuHeader}$item${COLOR_reset}\n"
    elif [ $i == $length ]
    then
      echo -e "\n${color}$item${COLOR_reset}"
    else
      echo -e "${color}$item${COLOR_reset}"
    fi
    ((i++))

  done
}

### GUI MANAGER FUNCTION ###
function gui {

  while true
  do

    exitVar= #reset exitVar
    # Update length
    length=${#menu[@]}
    # "Repair" length var
    max=$((length - 1))

    # CHECK IF MENU HAS CHANGED
    if ! [ "$max_past" = "$max" ]
    then
      # Auto-select first entry
      SELECT_menu=1
      # store the old max again for further comparison
      max_past="$max"
    fi

    build
    trap "exit_program" SIGINT
    read -s -n1 keyInput
    case $keyInput in
        A)
            if ! [ "$SELECT_menu" = "1" ]
            then
              SELECT_menu=$((SELECT_menu - 1))
            fi;;
        B)
            if ! [ "$SELECT_menu" = "$max" ]
            then
              SELECT_menu=$((SELECT_menu + 1))
            fi;;
        $KEY_escape) #RETURN TO GAME BY PRESSING THE PAUSE KEY AGAIN
            if [ "$call" = "ingamePause_do" ] # ONLY DO IF INGAME OFC
            then
              return
            fi;;
        "") # CALL THE CORRESPONDING MENU CODE
            $call

            if [ $exitVar ]
            then
              return
            fi
    esac
  done
}

# START BY GETTING THE OPTIONS
query_options

# AT FIRST GUI START THE MAIN MENU WILL POP-UP #
mainMenu
# Preset values for main menu
length=${#menu[@]}
max=$((length - 1))
